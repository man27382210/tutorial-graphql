type Message {
  id: ID!
  content: String
  author: String
}

type MessageConnection {
  pageInfo: PageInfo
  edges: [MessageEdge]
  totalCount: Int
}

type MessageEdge {
  node: Message
  cursor: String
}

input MessageInput {
  content: String
  author: String
}

type MessagePayload {
  messageEdge: MessageEdge
}

type Mutation {
  createMessage(input: MessageInput): MessagePayload
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Query {
  getMessage(first: Int): MessageConnection
  getMessageByPage(first: Int, after: String, last: Int, before: String): MessageConnection
}

